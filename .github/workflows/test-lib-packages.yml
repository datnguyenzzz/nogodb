name: Test Library Packages

on:
  push:
    branches: [ master, main ]
    paths:
      - 'lib/**'
  pull_request:
    branches: [ master, main ]
    paths:
      - 'lib/**'

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        package:
          - go-adaptive-radix-tree
          - go-block-cache
          - go-blocked-bloom-filter
          - go-bytesbufferpool
          - go-context-aware-lock
          - go-fs
          - go-sstable
          - go-wal

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.x'
    
    - name: Test ${{ matrix.package }} with coverage
      run: |
        cd lib/${{ matrix.package }}
        go test -v -coverprofile=coverage.out ./...
        go tool cover -func=coverage.out | tail -1 | awk '{print $3}' > coverage.txt
    
    - name: Upload coverage artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-${{ matrix.package }}
        path: lib/${{ matrix.package }}/coverage.txt

  update-readme:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Download all coverage artifacts
      uses: actions/download-artifact@v4
      with:
        path: coverage-reports
    
    - name: Generate coverage report and update README
      run: |
        echo "## Test Coverage" > coverage_section.md
        echo "" >> coverage_section.md
        echo "| Package | Coverage |" >> coverage_section.md
        echo "|---------|----------|" >> coverage_section.md
        
        for dir in coverage-reports/coverage-*; do
          package_name=$(basename "$dir" | sed 's/coverage-//')
          if [ -f "$dir/coverage.txt" ]; then
            coverage=$(cat "$dir/coverage.txt")
            echo "| $package_name | $coverage |" >> coverage_section.md
          else
            echo "| $package_name | N/A |" >> coverage_section.md
          fi
        done
        
        # Remove existing coverage section if it exists
        sed -i '/## Test Coverage/,/^$/d' README.md
        
        # Add coverage section after Internal component section (skip all Internal component lines)
        awk '
        BEGIN { in_internal = 0 }
        /^## Internal component/ { 
          in_internal = 1
          print $0
          next
        }
        /^##/ && in_internal { 
          # Found next section, insert coverage before it
          while ((getline line < "coverage_section.md") > 0) {
            print line
          }
          print ""
          in_internal = 0
          print $0
          next
        }
        in_internal { next }  # Skip all lines in Internal component section
        { print $0 }
        END {
          # If we reach end of file while still in internal section
          if (in_internal) {
            while ((getline line < "coverage_section.md") > 0) {
              print line
            }
          }
        }
        ' README.md > README_new.md && mv README_new.md README.md
    
    - name: Commit coverage update
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update test coverage in README [skip ci]"
          git push
        fi