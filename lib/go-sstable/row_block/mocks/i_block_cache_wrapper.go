// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	common "github.com/datnguyenzzz/nogodb/lib/go-sstable/common"
	block "github.com/datnguyenzzz/nogodb/lib/go-sstable/common/block"

	mock "github.com/stretchr/testify/mock"
)

// IBlockCacheWrapper is an autogenerated mock type for the IBlockCacheWrapper type
type IBlockCacheWrapper struct {
	mock.Mock
}

// Close provides a mock function with no fields
func (_m *IBlockCacheWrapper) Close() {
	_m.Called()
}

// Get provides a mock function with given fields: bh
func (_m *IBlockCacheWrapper) Get(bh *block.BlockHandle) (*common.InternalLazyValue, error) {
	ret := _m.Called(bh)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *common.InternalLazyValue
	var r1 error
	if rf, ok := ret.Get(0).(func(*block.BlockHandle) (*common.InternalLazyValue, error)); ok {
		return rf(bh)
	}
	if rf, ok := ret.Get(0).(func(*block.BlockHandle) *common.InternalLazyValue); ok {
		r0 = rf(bh)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.InternalLazyValue)
		}
	}

	if rf, ok := ret.Get(1).(func(*block.BlockHandle) error); ok {
		r1 = rf(bh)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: bh, val
func (_m *IBlockCacheWrapper) Set(bh *block.BlockHandle, val *common.InternalLazyValue) error {
	ret := _m.Called(bh, val)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*block.BlockHandle, *common.InternalLazyValue) error); ok {
		r0 = rf(bh, val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIBlockCacheWrapper creates a new instance of IBlockCacheWrapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIBlockCacheWrapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *IBlockCacheWrapper {
	mock := &IBlockCacheWrapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
