// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	common "github.com/datnguyenzzz/nogodb/lib/go-sstable/common"
	block "github.com/datnguyenzzz/nogodb/lib/go-sstable/common/block"

	mock "github.com/stretchr/testify/mock"

	options "github.com/datnguyenzzz/nogodb/lib/go-sstable/options"

	predictable_size "github.com/datnguyenzzz/nogodb/lib/go-bytesbufferpool/predictable_size"

	storage "github.com/datnguyenzzz/nogodb/lib/go-sstable/storage"
)

// IBlockReader is an autogenerated mock type for the IBlockReader type
type IBlockReader struct {
	mock.Mock
}

// Init provides a mock function with given fields: bpool, fr, cacheOpts
func (_m *IBlockReader) Init(bpool *predictable_size.PredictablePool, fr storage.ILayoutReader, cacheOpts *options.CacheOptions) {
	_m.Called(bpool, fr, cacheOpts)
}

// Read provides a mock function with given fields: bh, kind
func (_m *IBlockReader) Read(bh *block.BlockHandle, kind block.BlockKind) (*common.InternalLazyValue, error) {
	ret := _m.Called(bh, kind)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 *common.InternalLazyValue
	var r1 error
	if rf, ok := ret.Get(0).(func(*block.BlockHandle, block.BlockKind) (*common.InternalLazyValue, error)); ok {
		return rf(bh, kind)
	}
	if rf, ok := ret.Get(0).(func(*block.BlockHandle, block.BlockKind) *common.InternalLazyValue); ok {
		r0 = rf(bh, kind)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.InternalLazyValue)
		}
	}

	if rf, ok := ret.Get(1).(func(*block.BlockHandle, block.BlockKind) error); ok {
		r1 = rf(bh, kind)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadThroughCache provides a mock function with given fields: bh, kind
func (_m *IBlockReader) ReadThroughCache(bh *block.BlockHandle, kind block.BlockKind) (*common.InternalLazyValue, error) {
	ret := _m.Called(bh, kind)

	if len(ret) == 0 {
		panic("no return value specified for ReadThroughCache")
	}

	var r0 *common.InternalLazyValue
	var r1 error
	if rf, ok := ret.Get(0).(func(*block.BlockHandle, block.BlockKind) (*common.InternalLazyValue, error)); ok {
		return rf(bh, kind)
	}
	if rf, ok := ret.Get(0).(func(*block.BlockHandle, block.BlockKind) *common.InternalLazyValue); ok {
		r0 = rf(bh, kind)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.InternalLazyValue)
		}
	}

	if rf, ok := ret.Get(1).(func(*block.BlockHandle, block.BlockKind) error); ok {
		r1 = rf(bh, kind)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Release provides a mock function with no fields
func (_m *IBlockReader) Release() {
	_m.Called()
}

// NewIBlockReader creates a new instance of IBlockReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIBlockReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *IBlockReader {
	mock := &IBlockReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
