// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	block "github.com/datnguyenzzz/nogodb/lib/go-sstable/common/block"
	mock "github.com/stretchr/testify/mock"
)

// ILayoutWriter is an autogenerated mock type for the ILayoutWriter type
type ILayoutWriter struct {
	mock.Mock
}

// Abort provides a mock function with no fields
func (_m *ILayoutWriter) Abort() {
	_m.Called()
}

// Finish provides a mock function with no fields
func (_m *ILayoutWriter) Finish() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Finish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WritePhysicalBlock provides a mock function with given fields: b
func (_m *ILayoutWriter) WritePhysicalBlock(b block.PhysicalBlock) (block.BlockHandle, error) {
	ret := _m.Called(b)

	if len(ret) == 0 {
		panic("no return value specified for WritePhysicalBlock")
	}

	var r0 block.BlockHandle
	var r1 error
	if rf, ok := ret.Get(0).(func(block.PhysicalBlock) (block.BlockHandle, error)); ok {
		return rf(b)
	}
	if rf, ok := ret.Get(0).(func(block.PhysicalBlock) block.BlockHandle); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(block.BlockHandle)
	}

	if rf, ok := ret.Get(1).(func(block.PhysicalBlock) error); ok {
		r1 = rf(b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteRawBytes provides a mock function with given fields: b
func (_m *ILayoutWriter) WriteRawBytes(b []byte) (block.BlockHandle, error) {
	ret := _m.Called(b)

	if len(ret) == 0 {
		panic("no return value specified for WriteRawBytes")
	}

	var r0 block.BlockHandle
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (block.BlockHandle, error)); ok {
		return rf(b)
	}
	if rf, ok := ret.Get(0).(func([]byte) block.BlockHandle); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(block.BlockHandle)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewILayoutWriter creates a new instance of ILayoutWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewILayoutWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *ILayoutWriter {
	mock := &ILayoutWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
